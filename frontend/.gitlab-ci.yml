stages:
  - build
  - release
  - telegram

variables:
  VERSION: 1.0.${CI_PIPELINE_ID}
  FRONTEND_ARTIFACT_URL: ${NEXUS_REPO_FRONTEND_URL}/sausage-store-front/sausage-store/${VERSION}/sausage-store-${VERSION}.tar.gz

cache:
  paths:
    - frontend/dist/frontend

build-frontend-code-job:
  stage: build
  script:
    - cd frontend
    - npm install
    - npm run build
  artifacts:
    name: release-frontend
    paths:
      - frontend/dist/frontend
  only:
    changes:
      - frontend/**/*

upload-frontend-release:
  stage: release
  dependencies:
    - build-frontend-code-job
  script:
    - cd frontend/dist
    - tar czvf sausage-store-${VERSION}.tar.gz frontend
    - curl -v -u "${NEXUS_REPO_USER}:${NEXUS_REPO_PASS}" --upload-file sausage-store-${VERSION}.tar.gz ${FRONTEND_ARTIFACT_URL}

telegram-notification-frontend:
  stage: telegram
  script:
    - echo "send frontend CURL"
    - |
      curl --fail --output "/dev/null" --silent --show-error --write-out "HTTP response: ${http_code}\n\n" \
        --data "{\"chat_id\": \"${TELEGRAM_CHAT_ID}\", \"text\": \"Вышла новая версия frontend сосисочной - ${VERSION}\nСкачать frontend можно по ссылке — ${FRONTEND_ARTIFACT_URL}\"}" \
        --header "Content-Type: application/json" \
        --request POST \
        "https://api.telegram.org/${TELEGRAM_PRIVATE_TOKEN}/sendMessage"
  rules:
    - if: $CI_COMMIT_MESSAGE =~ /^send notification/
  needs:
    - upload-frontend-release
