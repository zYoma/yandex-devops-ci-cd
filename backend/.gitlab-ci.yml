stages:
  - build
  - test
  - release
  - telegram
  - deploy

include:
  - template: Security/SAST.gitlab-ci.yml
  - project: 'templates/ci'
    file: 'DockerInDockerTemplate.yml'

variables:
  VERSION: 1.0.${CI_PIPELINE_ID}
  MAVEN_REPO_PATH: ${CI_PROJECT_DIR}/.m2/repository
  JAVA_OPTS: -XX:MaxRAMPercentage=90
  BACKEND_ARTIFACT_URL:  ${NEXUS_REPO_BACKEND_URL}/com/yandex/practicum/devops/sausage-store/${VERSION}/sausage-store-${VERSION}.jar

cache:
  paths:
    - ${CI_PROJECT_DIR}/.m2/repository

build-backend-code-job:
  stage: build
  image: docker:20.10.12-dind-rootless
  before_script:
    - until docker info; do sleep 1; done
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  script:
    - cd backend
    - >
      docker build
      --build-arg VERSION=$VERSION
      --tag $CI_REGISTRY_IMAGE/sausage-backend:$CI_COMMIT_SHA
      .
    - docker push $CI_REGISTRY_IMAGE/sausage-backend:$CI_COMMIT_SHA
  rules:
    - changes:
        - backend/**/*

spotbugs-sast:
  dependencies:
    - build-backend-code-job
  variables:
    COMPILE: "false"
    SAST_JAVA_VERSION: 16
    MAVEN_REPO_PATH: $CI_PROJECT_DIR/.m2/repository
    SPRING_CLOUD_VAULT_ENABLED: "false"
  artifacts:
    reports:
      sast: gl-sast-report.json

sonarqube-backend-sast:
  stage: test
  image: maven:3.8-openjdk-16
  variables:
    SPRING_CLOUD_VAULT_ENABLED: "false"
  script:
    - cd backend
    - export "SPRING_DATASOURCE_URL=jdbc:h2:mem:testdb";
    - export "SPRING_DATASOURCE_USERNAME=sa";
    - export "SPRING_DATASOURCE_PASSWORD=password";
    - >
      mvn verify sonar:sonar -Dsonar.qualitygate.wait=true
      -Dsonar.projectKey=${SONAR_PROJECT_KEY_BACKEND}
      -Dsonar.host.url=${SONARQUBE_URL}
      -Dsonar.login=${SONAR_LOGIN_BACKEND}
  dependencies:
      - build-backend-code-job

upload-backend-release:
  variables:
    GIT_STRATEGY: none
  image: docker:20.10.12-dind-rootless
  stage: release
  before_script:
    - until docker info; do sleep 1; done
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  needs:
    - spotbugs-sast
    - sonarqube-backend-sast
  script:
    - docker pull $CI_REGISTRY_IMAGE/sausage-backend:$CI_COMMIT_SHA
    - docker tag $CI_REGISTRY_IMAGE/sausage-backend:$CI_COMMIT_SHA $CI_REGISTRY_IMAGE/sausage-backend:latest
    - docker push $CI_REGISTRY_IMAGE/sausage-backend:latest

deploy:
  stage: deploy
  image: vault:1.11.3
  before_script:
    - apk add openssh-client bash
    - eval $(ssh-agent -s)
    - echo "$SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add -
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    - echo "$SSH_KNOWN_HOSTS" >> ~/.ssh/known_hosts
    - chmod 644 ~/.ssh/known_hosts
    - echo "$SSH_PRIVATE_KEY" >> ~/.ssh/id_rsa
    - chmod 600 ~/.ssh/id_rsa
    - scp -i ~/.ssh/id_rsa docker-compose.yml ${DEV_USER}@${DEV_HOST}:/home/student
  script:
    - export VAULT_TOKEN="$(vault write -field=token auth/jwt/login role=sausage-store jwt=$CI_JOB_JWT)"
    - ssh ${DEV_USER}@${DEV_HOST} 
      "docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY;
       export "CURRENT_VERSION=${VERSION}"; 
       export "VERSION=${VERSION}"; 
       export "DEV_HOST=${DEV_HOST}";
       export "SPRING_DATASOURCE_URL=${SPRING_DATASOURCE_URL}";
       export "SPRING_DATASOURCE_USERNAME=$(vault kv get -field=spring.datasource.username secret/sausage-store/db-username)";
       export "SPRING_DATASOURCE_PASSWORD=$(vault kv get -field=spring.datasource.password secret/sausage-store/db-password)";
       export "SPRING_DATA_MONGODB_URI=$(vault kv get -field=uri secret/sausage-store/mongo)";
       setsid /bin/bash -s " < ./backend/backend_deploy.sh
  needs:
    - upload-backend-release
  when: manual
  environment:
    name: backend/$CI_COMMIT_REF_NAME
    url: http://std-017-03.praktikum-services.tech
  only:
    - branches
  except:
    - main

telegram-notification-backend:
  stage: telegram
  script:
    - echo "send backend CURL"
    - |
      curl --fail --output "/dev/null" --silent --show-error --write-out "HTTP response: ${http_code}\n\n" \
        --data "{\"chat_id\": \"${TELEGRAM_CHAT_ID}\", \"text\": \"Вышла новая версия backend сосисочной - ${VERSION}\nСкачать backend можно по ссылке — ${BACKEND_ARTIFACT_URL}\"}" \
        --header "Content-Type: application/json" \
        --request POST \
        "https://api.telegram.org/${TELEGRAM_PRIVATE_TOKEN}/sendMessage"
  rules:
      - if: $CI_COMMIT_MESSAGE =~ /^send notification/
  needs:
    - upload-backend-release
