stages:
  - build
  - test
  - release
  - deploy

include:
  - template: Security/SAST.gitlab-ci.yml
  - project: 'templates/ci'
    file: 'DockerInDockerTemplate.yml'

variables:
  VERSION: 1.0.${CI_PIPELINE_ID}
  MAVEN_REPO_PATH: ${CI_PROJECT_DIR}/.m2/repository
  JAVA_OPTS: -XX:MaxRAMPercentage=90
  BACKEND_ARTIFACT_URL:  ${NEXUS_REPO_BACKEND_URL}/com/yandex/practicum/devops/sausage-store/${VERSION}/sausage-store-${VERSION}.jar

cache:
  paths:
    - ${CI_PROJECT_DIR}/.m2/repository

build-backend-code-job:
  stage: build
  image: docker:20.10.12-dind-rootless
  before_script:
    - until docker info; do sleep 1; done
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  script:
    - cd backend
    - >
      docker build
      --build-arg VERSION=$VERSION
      --tag $CI_REGISTRY_IMAGE/sausage-backend:$CI_COMMIT_SHA
      .
    - docker push $CI_REGISTRY_IMAGE/sausage-backend:$CI_COMMIT_SHA
    - echo "CI_REGISTRY_IMAGE $CI_REGISTRY_IMAGE"
  artifacts:
    name: release-backend
    paths:
      - ${CI_PROJECT_DIR}/.m2/
  rules:
    - changes:
        - backend/**/*

spotbugs-sast:
  dependencies:
    - build-backend-code-job
  variables:
    COMPILE: "false"
    SAST_JAVA_VERSION: 16
    MAVEN_REPO_PATH: $CI_PROJECT_DIR/.m2/repository
  artifacts:
    reports:
      sast: gl-sast-report.json

#sonarqube-backend-sast:
#  stage: test
#  image: maven:3.8-openjdk-16
#  script:
#    - cd backend
#    - >
#      mvn verify sonar:sonar -Dsonar.qualitygate.wait=true
#      -Dsonar.projectKey=${SONAR_PROJECT_KEY_BACKEND}
#      -Dsonar.host.url=${SONARQUBE_URL}
#      -Dsonar.login=${SONAR_LOGIN_BACKEND}
#  dependencies:
#      - build-backend-code-job

upload-backend-release:
  variables:
    GIT_STRATEGY: none
  image: docker:20.10.12-dind-rootless
  stage: release
  before_script:
    - until docker info; do sleep 1; done
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  needs:
    - spotbugs-sast
#    - sonarqube-backend-sast
  script:
    - docker pull $CI_REGISTRY_IMAGE/sausage-backend:$CI_COMMIT_SHA
    - docker tag $CI_REGISTRY_IMAGE/sausage-backend:$CI_COMMIT_SHA $CI_REGISTRY_IMAGE/sausage-backend:latest
    - docker push $CI_REGISTRY_IMAGE/sausage-backend:latest

deploy:
  stage: deploy
  image: alpine:3.15.0
  before_script:
    - apk add openssh-client bash
    - eval $(ssh-agent -s)
    - echo "$SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add -
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    - echo "$SSH_KNOWN_HOSTS" >> ~/.ssh/known_hosts
    - chmod 644 ~/.ssh/known_hosts
  script:
    - ssh ${DEV_USER}@${DEV_HOST} 
      "export "CURRENT_VERSION=${VERSION}"; 
       export "VERSION=${VERSION}"; 
       export "DEV_HOST=${DEV_HOST}";
       export "NEXUS_REPO_BACKEND_URL=${NEXUS_REPO_BACKEND_URL}"; 
       export "NEXUS_REPO_USER=${NEXUS_REPO_USER}"; 
       export "NEXUS_REPO_PASS=${NEXUS_REPO_PASS}";
       export "SPRING_DATASOURCE_URL=${SPRING_DATASOURCE_URL}";
       export "SPRING_DATASOURCE_USERNAME=${SPRING_DATASOURCE_USERNAME}";
       export "SPRING_DATA_MONGODB_URI=${SPRING_DATA_MONGODB_URI}";
       export "NEXUS_REPO_PASS=${NEXUS_REPO_PASS}";
       setsid /bin/bash -s " < ./backend/backend_deploy.sh
  needs:
    - upload-backend-release
  when: manual
  environment:
    name: backend/$CI_COMMIT_REF_NAME
    url: http://std-017-03.praktikum-services.tech
  only:
    - branches
  except:
    - main

