stages:
  - build
  - test
  - telegram

include:
  - template: Security/SAST.gitlab-ci.yml

build-backend-code-job:
  stage: build
  script:
    - cd backend
    - mvn -Dmaven.repo.local=${CI_PROJECT_DIR}/.m2/repository -s settings.xml --batch-mode -Dversion.application=${VERSION} -Dmaven.test.skip=true deploy
  artifacts:
    name: release-backend
    paths:
      - ${CI_PROJECT_DIR}/.m2/

build-frontend-code-job:
  stage: build
  script:
    - echo GE_JOB_ID=$CI_JOB_ID >> frontend_job_id.env
    - cd frontend
    - npm install
    - npm run build
  artifacts:
    name: release-frontend
    paths:
      - frontend/dist/frontend
    reports:
      dotenv: frontend_job_id.env

spotbugs-sast:
  dependencies:
    - build-backend-code-job
  variables:
    COMPILE: "false"
    SAST_JAVA_VERSION: 16
    MAVEN_REPO_PATH: $CI_PROJECT_DIR/.m2/repository
  artifacts:
    reports:
      sast: gl-sast-report.json

sonarqube-backend-sast:
  stage: test
  image: maven:3.8-openjdk-16
  script:
    - cd backend
    - >
      mvn verify sonar:sonar -Dsonar.qualitygate.wait=true
      -Dsonar.projectKey=${SONAR_PROJECT_KEY_BACKEND}
      -Dsonar.host.url=${SONARQUBE_URL}
      -Dsonar.login=${SONAR_LOGIN_BACKEND}
  dependencies:
    - build-backend-code-job

sonarqube-frontend-sast:
  stage: test
  image: sonarsource/sonar-scanner-cli
  script:
    - cd frontend
    - >
      sonar-scanner -Dsonar.qualitygate.wait=true
      -Dsonar.projectKey=${SONAR_PROJECT_KEY_FRONTEND}
      -Dsonar.host.url=${SONARQUBE_URL}
      -Dsonar.login=${SONAR_LOGIN_FRONTEND}
  dependencies:
    - build-frontend-code-job

telegram-notification-backend:
  stage: telegram
  variables:
    ARTIFACT_URL: "$CI_PROJECT_URL/-/jobs/$GE_JOB_ID/artifacts/download?file_type=archive"
  script:
    - echo "send backend CURL"
    - |
      curl --fail --output "/dev/null" --silent --show-error --write-out "HTTP response: ${http_code}\n\n" \
        --data "{\"chat_id\": \"${TELEGRAM_CHAT_ID}\", \"text\": \"[Зимин Николай] собрал backend ${ARTIFACT_URL}\"}" \
        --header "Content-Type: application/json" \
        --request POST \
        "https://api.telegram.org/${TELEGRAM_PRIVATE_TOKEN}/sendMessage"
  rules:
    - if: $CI_COMMIT_MESSAGE =~ /^send notification/
  needs:
    - build-backend-code-job

telegram-notification-frontend:
  stage: telegram
  variables:
    ARTIFACT_URL: "$CI_PROJECT_URL/-/jobs/$GE_JOB_ID/artifacts/download?file_type=archive"
  script:
    - echo "send frontend CURL"
    - |
      curl --fail --output "/dev/null" --silent --show-error --write-out "HTTP response: ${http_code}\n\n" \
        --data "{\"chat_id\": \"${TELEGRAM_CHAT_ID}\", \"text\": \"[Зимин Николай] собрал frontend ${ARTIFACT_URL}\"}" \
        --header "Content-Type: application/json" \
        --request POST \
        "https://api.telegram.org/${TELEGRAM_PRIVATE_TOKEN}/sendMessage"
  rules:
    - if: $CI_COMMIT_MESSAGE =~ /^send notification/
  needs:
    - build-frontend-code-job